% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/marshal.keras.R
\name{marshal.keras.engine.base_layer.Layer}
\alias{marshal.keras.engine.base_layer.Layer}
\alias{marshallable.keras.engine.base_layer.Layer}
\title{Marshalling of 'keras' objects}
\usage{
\method{marshal}{keras.engine.base_layer.Layer}(model, ...)

\method{marshallable}{keras.engine.base_layer.Layer}(...)
}
\arguments{
\item{model}{A \link[keras:keras_model]{keras:keras.engine.base_layer.Layer} object.}

\item{\dots}{Not used.}
}
\value{
A \code{marshalled} object as described in \code{\link[=marshal]{marshal()}}.
}
\description{
Marshalling of 'keras' objects
}
\details{
\code{\link[keras:serialize_model]{keras::serialize_model()}} is used to produce a marshalled version
of the original object.
\code{\link[keras:unserialize_model]{keras::unserialize_model()}} is used to reconstruct a version of the
original object from the marshalled object.
}
\examples{
## Run only in interactive mode, because example takes > 5 seconds,
## which is longer than what is allowed on CRAN
if (interactive() && requireNamespace("keras", quietly = TRUE)) {
  library(keras)
  
  ## Create a keras model (adopted from {keras} vignette)
  inputs <- layer_input(shape = shape(32))
  outputs <- layer_dense(inputs, units = 1L)
  model <- keras_model(inputs, outputs)
  model <- compile(model, optimizer = "adam", loss = "mean_squared_error")
  print(model)

  ## Not needed anymore
  rm(list = c("inputs", "outputs"))

  ## Marshal
  model_ <- marshal(model)
  
  ## Unmarshal
  model2 <- unmarshal(model_)
  
  stopifnot(
    identical(summary(model2), summary(model))
  )


  ## Fitted keras model (adopted from {keras} vignette)
  test_input <- array(runif(128 * 32), dim = c(128, 32))
  test_target <- array(runif(128), dim = c(128, 1))
  hist <- fit(model, test_input, test_target)
  print(hist)
  print(model)
  
  ## Not needed anymore
  rm(list = "test_target")
  
  ## Marshal
  model_ <- marshal(model)
  
  ## Unmarshal
  model2 <- unmarshal(model_)
  
  stopifnot(
    identical(summary(model2), summary(model)),
    identical(stats::predict(model2, test_input), stats::predict(model, test_input))
  )
}
}
